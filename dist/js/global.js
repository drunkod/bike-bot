const VK_ID_PUBLIC_OVER = process.env.VK_ID_PUBLIC_OVER;
const VK_ID_PUBLIC_BIKE = process.env.VK_ID_PUBLIC_BIKE;
const momenttz = require("moment-timezone");
const { DateTime } = require("luxon");
const EkbDateTime = DateTime.local().setZone("Asia/Yekaterinburg");
const VkBot = require("node-vk-bot-api");

module.exports = class Global {
  constructor(social, socialId, group_id, contextRive, bot) {
    this._social = social;
    this._chatId = socialId;
    this._group_id = group_id;
    this.rive = contextRive;
    this.bot = bot;
  }
  //to do –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  //—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã vk.me/bike_overhear_chelyabinsk?ref=vk_12&ref_source=bot
  get ref_id() {
    return this.rive.getUservar(this.chatId, "ref_id");
  }
  //ref=vk_12
  set ref_id(ref_id) {
    if (ref_id.search("_") !== -1) {
      this.ref_social = ref_id.split("_")[0];
      this.rive.setUservar(this.chatId, "ref_id", Number(ref_id.split("_")[1]));
    } else {
      this.rive.setUservar(this.chatId, "ref_id", "undefined");
    }
  }
  get ref_social() {
    return this.rive.getUservar(this.chatId, "ref_social");
  }
  set ref_social(ref_social) {
    this.rive.setUservar(this.chatId, "ref_social", `${ref_social}`);
  }
  // ref_source=bot
  get ref_source() {
    return this.rive.getUservar(this.chatId, "ref_source");
  }
  set ref_source(ref_source) {
    this.rive.setUservar(this.chatId, "ref_source", `${ref_source}`);
  }
  get ref_name() {
    return this.rive.getUservar(this.chatId, "ref_name");
  }
  set ref_name(ref_name) {
    this.rive.setUservar(this.chatId, "ref_name", ref_name);
  }
  get ref_sex() {
    return this.rive.getUservar(this.chatId, "ref_sex");
  }
  set ref_sex(ref_sex) {
    this.rive.setUservar(this.chatId, "ref_sex", ref_sex);
  }
  get referal() {
    if (this.ref_id === "undefined") {
      return false;
    } else {
      return {
        source: this.ref_social,
        medium: this.ref_source,
        name: this.ref_name,
        id: this.ref_id,
        sex: this.ref_sex
      };
    }
  }

  get social() {
    return this._social;
  }
  set social(social) {
    this.rive.setUservar(this.chatId, "social", social);
  }
  get chatId() {
    return this._chatId;
  }
  get social_id() {
    return this._chatId;
  }
  set social_id(social_id) {
    this.rive.setUservar(this.chatId, "social_id", social_id);
  }
  get group_id() {
    return this._group_id;
  }
  set group_id(group_id) {
    this.rive.setUservar(this.chatId, "group_id", group_id);
  }
  set group_id(group_id) {
    this.rive.setUservar(this.chatId, "group_id", group_id);
  }
  get firstName() {
    return this.rive.getUservar(this.chatId, "firstName");
  }
  set firstName(firstName) {
    this.rive.setUservar(this.chatId, "firstName", firstName);
  }
  get lastName() {
    return this.rive.getUservar(this.chatId, "lastName");
  }
  set lastName(lastName) {
    this.rive.setUservar(this.chatId, "lastName", lastName);
  }
  get sex() {
    return this.rive.getUservar(this.chatId, "sex");
  }
  set sex(sex) {
    this.rive.setUservar(this.chatId, "sex", sex);
  }
  get photo_url() {
    return this.rive.getUservar(this.chatId, "photo_url");
  }
  set photo_url(name) {
    this.rive.setUservar(this.chatId, "photo_url", name);
  }
  get topic() {
    return this.rive.getUservar(this.chatId, "topic");
  }
  set topic(name) {
    this.rive.setUservar(this.chatId, "topic", name);
  }
  get Uservars() {
    return this.rive.getUservars(this.chatId);
  }
  set Uservars(data) {
    this.rive.setUservars(this.chatId, data);
  }
  get TYPE() {
    return this.rive.getUservar(this.chatId, "TYPE");
  }
  set TYPE(type) {
    this.rive.setUservar(this.chatId, "TYPE", type);
  }
  get menu() {
    return this.rive.getUservar(this.chatId, "menu");
  }
  set menu(name) {
    this.rive.setUservar(this.chatId, "menu", name);
  }

  get eventutcdate() {
    return this.rive.getUservar(this.chatId, "eventutcdate");
  }
  get vk_aid() {
    return this.rive.getUservar(this.chatId, "vk_aid");
  }
  set vk_aid(id) {
    this.rive.setUservar(this.chatId, "vk_aid", id);
  }
  set vkalbum_link(link) {
    this.rive.setUservar(this.chatId, "vkalbum_link", link);
  }

  // vk
  static init_vk_bot(public_type) {
    return new VkBot(this.getToken(public_type));
  }
  //to do –≤—ã–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é
  static getToken(public_type) {
    if (public_type === "bike") {
      return process.env.VK_TOKEN_PUBLIC_BIKE;
    } else if (public_type === "overhear") {
      return process.env.VK_TOKEN_PUBLIC_OVER;
    }
  }
  async save_referal_to_rive({ ref, ref_source }) {
    if (ref && ref_source) {
      //–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      this.ref_id = ref;
      this.ref_source = ref_source;
      const res = await this.bot.api("users.get", {
        user_ids: this.ref_id,
        fields: "photo_200,sex",
        access_token: this.bot.settings.token
      });
      let { first_name, last_name, photo_200, sex } = res.response[0];
      console.log(JSON.stringify("–†–µ—Ñ–µ—Ä–∞–ª:" + first_name + last_name));

      //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –∏ –ø–æ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–∞

      this.ref_name = first_name + " " + last_name;
      this.ref_sex = sex;
      return true;
    } else {
      return false;
    }
  }

  async save_user_to_rive({ from_id }, social) {
    if (from_id) {
      const res = await this.bot.api("users.get", {
        user_ids: from_id,
        fields: "photo_200,sex",
        access_token: this.bot.settings.token
      });
      let { first_name, last_name, photo_200, sex } = res.response[0];
      console.log(JSON.stringify("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" + first_name + last_name));
      //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –∏ –ø–æ–ª —Ä–µ—Ñ–µ—Ä–∞–ª–∞

      this.firstName = first_name;
      this.lastName = last_name;
      this.photo_url = photo_200;
      this.sex = sex;
      this.social = social;
      this.social_id = this.social_id;
      this.group_id = this.group_id;
      return true;
    } else {
      return false;
    }
  }
  hashtags_template_social(
    hash_id_bike,
    hashtag_sex,
    region,
    biketemp,
    wintertemp,
    raintemp,
    bikemodel
  ) {
    switch (this.social) {
      case "vk":
        return `#–≤—Å–µ_–∞–Ω–∫–µ—Ç—ã@${hash_id_bike} #${region.replace(
          /\s/g,
          "_"
        )}@${hash_id_bike} #–ª—é–±–∏–º—ã–π_—Ç–µ–º–ø_${biketemp.replace(
          /\s/g,
          "_"
        )}@${hash_id_bike} #${wintertemp.replace(
          /\s/g,
          "_"
        )}@${hash_id_bike} #${raintemp.replace(
          /\s/g,
          "_"
        )}@${hash_id_bike} #${bikemodel.replace(/\s/g, "_")}@${hash_id_bike}`;
        break;
      case "tg":
        return `#–≤—Å–µ_–∞–Ω–∫–µ—Ç—ã ${hashtag_sex} #${region.replace(
          /\s/g,
          "_"
        )} #–ª—é–±–∏–º—ã–π_—Ç–µ–º–ø_${biketemp.replace(/\s/g, "_")} #${wintertemp.replace(
          /\s/g,
          "_"
        )} #${raintemp.replace(/\s/g, "_")} #${bikemodel.replace(/\s/g, "_")}`;
        break;
      case "fb":
        return `#–≤—Å–µ_–∞–Ω–∫–µ—Ç—ã ${hashtag_sex} #${region.replace(
          /\s/g,
          "_"
        )} #–ª—é–±–∏–º—ã–π_—Ç–µ–º–ø_${biketemp.replace(/\s/g, "_")} #${wintertemp.replace(
          /\s/g,
          "_"
        )} #${raintemp.replace(/\s/g, "_")} #${bikemodel.replace(/\s/g, "_")}`;
        break;
    }
  }

  temp_hashtag(type) {
    switch (type) {
      case "vk":
        switch (this.menu) {
          case "users":
            return `${this.emoji_sex} #${this.temp_name.replace(/\s/g, "_")}@${
              this.hash_id_bike
            }`;
          case "now":
            return `#${this.temp_name}@${this.hash_id_bike}`;
            break;
          case "event":
            return `#${this.temp_name}@${this.hash_id_bike} #${
              this.user_hashtag
            }@${this.hash_id_bike}`;
            break;
          case "report":
            return `#${this.temp_name}@${this.hash_id_overhear} #${
              this.user_hashtag
            }@${this.hash_id_overhear}`;
            break;
          default:
            return `#${this.temp_name}@${this.hash_id_bike} #${
              this.user_hashtag
            }@${this.hash_id_bike}`;
            break;
        }

      default:
        switch (this.menu) {
          case "now":
          case "tour":
            return `#${this.temp_name}`;
            break;
          default:
            return `#${this.temp_name} #${this.user_hashtag}`;
            break;
        }
        break;
    }
  }
  get hashtag_sex() {
    switch (this.sex) {
      case 1:
        return `–Ω–æ–≤–∞—è —É—á–∞—Å—Ç–Ω–∏—Ü–∞`;
        break;
      case 2:
        return `–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫`;
        break;
      default:
        return `–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫`;
        break;
    }
  }
  get attach_imagelink() {
    switch (this.menu) {
      case "users":
        switch (this.sex) {
          case 1:
            return `photo-71008034_456239427`;
          case 2:
            return `photo-71008034_456239426`;
          default:
            return `photo-71008034_456239426`;
        }
      case "now":
        return `photo-71008034_456239434`;
      case "event":
        return `photo-71008034_456239431`;
      case "report":
        return `photo-71008034_456239433`;
      case "sos":
        return `photo-71008034_456239432`;
      default:
        break;
    }
  }
  get emoji_sex() {
    switch (this.sex) {
      case 1:
        return `üö¥‚Äç‚ôÄÔ∏è`;
        break;
      case 2:
        return `üö¥‚Äç‚ôÇÔ∏è`;
        break;
      default:
        return ``;
        break;
    }
  }
  get sign_vk() {
    switch (this.social) {
      case "vk":
        return `\n \n üë• @id${this.social_id}(${this.firstName} ${
          this.lastName
        })`;
        break;
      case "tg":
        return `\n \n üë§ https://t.me/${this.social_id} - ${this.firstName} ${
          this.lastName
        }`;
        break;
      case "fb":
        return `\n \n üë• https://www.facebook.com/${this.social_id} - ${
          this.firstName
        } ${this.lastName}`;
        break;
    }
  }
  get sign_tg() {
    switch (this.social) {
      case "vk":
        return `\n \n üë§ https://vk.com/id${this.social_id} - ${
          this.firstName
        } ${this.lastName}`;
        break;
      case "tg":
        return `\n \n üë§ https://t.me/${this.social_id} - ${this.firstName} ${
          this.lastName
        }`;
        break;
      case "fb":
        return `\n \n üë• https://www.facebook.com/${this.social_id} - ${
          this.firstName
        } ${this.lastName}`;
        break;
    }
  }
  get sign_fb() {
    switch (this.social) {
      case "vk":
        return `\n \n üë§ https://vk.com/id${this.social_id} - ${
          this.firstName
        } ${this.lastName}`;
        break;
      case "tg":
        return `\n \n üë§ https://t.me/${this.social_id} - ${this.firstName} ${
          this.lastName
        }`;
        break;
      case "fb":
        return `\n \n üë• https://www.facebook.com/${this.social_id} - ${
          this.firstName
        } ${this.lastName}`;
        break;
    }
  }
  get msg() {
    switch (this.menu) {
      case "quest_name1":
        return `üîç #–ò—â—É_–∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–≤–µ—Å—Ç–µ: [club73768894|–§–æ—Ç–æ-–ö–≤–µ—Å—Ç '–ö—Ä–∞—Å–∏–≤—ã–π –ß–µ–ª—è–±–∏–Ω—Å–∫' - 16 –∏–ª–∏ 23 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 15:30 –†—è–¥–æ–º —Å –ø–∞–º—è—Ç–Ω–∏–∫–æ–º –ö—É—Ä—á–∞—Ç–æ–≤—É, –õ–µ–Ω–∏–Ω–∞ –ø—Ä.86]\n\n‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ: \n ${this.rive.getUservar(
          this.chatId,
          "msgabout"
        )}`;
        break;
      case "quest_name2":
        return `üîç #–ò—â—É_–∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–≤–µ—Å—Ç–µ: [club73768894|–§–æ—Ç–æ-–ö–≤–µ—Å—Ç '–ö—Ä–∞—Å–∏–≤—ã–π –ß–µ–ª—è–±–∏–Ω—Å–∫' - 16 –∏–ª–∏ 23 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 15:30 –†—è–¥–æ–º —Å –ø–∞–º—è—Ç–Ω–∏–∫–æ–º –ö—É—Ä—á–∞—Ç–æ–≤—É, –õ–µ–Ω–∏–Ω–∞ –ø—Ä.86]\n\n‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ: \n ${this.rive.getUservar(
          this.chatId,
          "msgabout"
        )}`;
        break;
      case "quest_new_idea":
        return (
          "#–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #–ü–æ–ö–≤–µ—Å—Ç—É " +
          this.rive.getUservar(this.chatId, "send_to_admin")
        );
        break;
      case "tour":
        return (
          "#–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #–ü–æ–í–µ–ª–æ–¢—É—Ä—É " +
          this.rive.getUservar(this.chatId, "send_to_admin")
        );
        break;
      case "now":
      case "event":
        switch (this.rive.getUservar(this.chatId, "msg_about")) {
          case "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            return "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ä—è—Å–Ω—è—Ç—å, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–µ—Å–µ–ª–æ–π –∫–æ–º–ø–∞–Ω–∏–∏!";

          default:
            return this.rive.getUservar(this.chatId, "msg_about");
        }
      case "report":
        switch (this.rive.getUservar(this.chatId, "msg_about")) {
          case "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            return "–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ä—è—Å–Ω—è—Ç—å, –Ω–æ —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞—Ç—É—à–∫–∏. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö...";

          default:
            return this.rive.getUservar(this.chatId, "msg_about");
        }
      case "sos":
      case "market":
      case "question":
      case "chat":
        return this.rive.getUservar(this.chatId, "msg_about");
        break;
      default:
        return false;
        break;
    }
  }
  get msg_full() {
    switch (this.menu) {
      case "quest_name1":
      case "quest_name2":
      case "quest_new_idea":
      case "tour":
        return this.msg;
        break;
      case "now":
        return `
        üìç –°–µ–π—á–∞—Å –∫–∞—Ç–∞—é—Å—å –≤ —Ä–∞–π–æ–Ω–µ ${this.region}, 
        —Ä—è–¥–æ–º —Å ${this.place}, ${this.msg}.
        ‚è± –ü–ª–∞–Ω–∏—Ä—É—é –∫–∞—Ç–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ ${this.hours}—á–∞—Å(–∞)(–æ–≤).

        ${this.contact}
        ______________________
        –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫—Ç–æ –∫–∞—Ç–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å –∏–ª–∏ –∫–∞—Ç–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ? 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
        ${this.hash_footer}`;
        break;
      case "users":
        return `
        ${this.rive.getUservar(this.chatId, "anketa")}

        ${this.contact}
        ______________________
        –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å—Ö–æ–∂–∏—Ö –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º? 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
        ${this.hash_footer}`;
        break;
      case "event":
        return `
        üìÖ –î–∞—Ç–∞: ${this.date} ‚åö –í—Ä–µ–º—è: ${this.time}
        üìç –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ —Ä–∞–π–æ–Ω–µ ${this.region}, —Ä—è–¥–æ–º —Å ${this.place}.\n${
          this.title_quotes
        }\n${this.msg}.

        ${this.contact}
        ______________________
        –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É? 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
        ${this.date_hashtag} ${this.hash_footer}`;
        break;
      case "report":
        if (this.user_hashtag === "–≤–µ–ª–æ—Ç—É—Ä") {
          return `
        üì∑ üìÖ –î–∞—Ç–∞: ${this.date} ${this.title_quotes}\n\n${this.msg}.
        
        üì∑ –ö–∏–¥–∞–µ–º —Ñ–æ—Ç–æ —Å—é–¥–∞: ${this.rive.getUservar(
          this.chatId,
          "vkalbum_link"
        )}
        –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ vk.com/albums-${this.rive.getVariable(
          "owner_id_overhear"
        )}
        ________________________________ 
        üì±:–¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É! –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ, –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Å–º—Å —Ä–∞—Å—Å—ã–ª–∫—É: https://vk.com/topic-71008034_30089813
        
        ______________________
        –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –æ–± –≤–µ–ª–æ—Ç—É—Ä–∞—Ö –∏–ª–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É? 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
        ${this.date_hashtag} ${this.hash_footer}`;
        } else {
          return `
        üì∑ üìÖ –î–∞—Ç–∞: ${this.date} ${this.title_quotes}\n\n${this.msg}.\n
        üì∑ –ö–∏–¥–∞–µ–º —Ñ–æ—Ç–æ —Å—é–¥–∞: ${this.rive.getUservar(
          this.chatId,
          "vkalbum_link"
        )}
        –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ vk.com/albums-${this.rive.getVariable(
          "owner_id_overhear"
        )}
        ______________________
        –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∏–ª–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É? 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
        ${this.date_hashtag} ${this.hash_footer}`;
        }
      case "sos":
        if (this.user_hashtag === "–∫—Ä–∞–∂–∞") {
          return `${this.title_quotes} ${this.msg}.
          –§–æ—Ç–æ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –≤ –∞–ª—å–±–æ–º–µ: vk.com/album-90700964_215518892
          –∏–ª–∏ —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ: vk.com/albums-${this.rive.getVariable(
            "owner_id_overhear"
          )}
          ‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ: ${this.contact}
          ______________________
           –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –∫—Ä–∞–∂–∏?
           –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
           ${this.hash_footer}`;
        } else {
          return `\n${this.title_quotes} ${this.msg}.\n\n‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ:\n ${
            this.contact
          }\n\n
          ______________________
          –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Å—Ç—ã? 
          –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–π –≥—Ä—É–ø–ø–µ:
          ${this.hash_footer}`;
        }
      case "market":
        return `\n${this.title_quotes} ${this.msg}.\n\n‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ:\\n ${
          this.contact
        }`;
      case "question":
        return `\n${this.title_quotes} ${this.msg}.\n\n‚Ñπ –û–± –∞–≤—Ç–æ—Ä–µ:\\n ${
          this.contact
        }`;
      default:
        return false;
    }
  }

  get hash_id_bike() {
    return this.rive.getVariable("hash_id_bike");
  }
  get hash_id_overhear() {
    return this.rive.getVariable("hash_id_overhear");
  }
  get hash_footer() {
    switch (this.menu) {
      case "users":
        return (
          this.temp_hashtag("vk") +
          " " +
          this.hashtags_template_social(
            this.rive.getVariable("hash_id_bike"),
            this.hashtag_sex,
            this.rive.getUservar(this.chatId, "region"),
            this.rive.getUservar(this.chatId, "biketemp"),
            this.rive.getUservar(this.chatId, "wintertemp"),
            this.rive.getUservar(this.chatId, "raintemp"),
            this.rive.getUservar(this.chatId, "bikemodel")
          ) +
          " #–≤–µ–ª–æ—Å–∏–ø–µ–¥ #–í–µ–ª–æ—Å–∏–ø–µ–¥–ö–∞–∂–¥—ã–π–î–µ–Ω—å #–ß–µ–ª—è–±–∏–Ω—Å–∫"
        );
        break;

      default:
        return (
          this.temp_hashtag("vk") +
          " #–≤–µ–ª–æ—Å–∏–ø–µ–¥ #–í–µ–ª–æ—Å–∏–ø–µ–¥–ö–∞–∂–¥—ã–π–î–µ–Ω—å #–ß–µ–ª—è–±–∏–Ω—Å–∫"
        );
    }
  }
  get mobile() {
    return this.rive.getUservar(this.chatId, "mobile");
  }
  get linkToMsg() {
    return `https://vk.me/id${this.chatId}`;
  }
  get contact() {
    if (this.mobile === "–Ω–µ —É–∫–∞–∑–∞–Ω") {
      return `‚òé –î–ª—è —Å–≤—è–∑–∏ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${this.linkToMsg} \n`;
    } else {
      return `‚òé ${
        ["–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: ", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "][
          Math.floor(
            Math.random() * ["–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: ", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "].length
          )
        ]
      }${this.mobile} \n`;
    }
  }
  get geo() {
    return { lat: this.lat, long: this.long };
  }
  get lat() {
    return this.rive.getUservar(this.chatId, "lat");
  }
  get long() {
    return this.rive.getUservar(this.chatId, "long");
  }
  get type() {
    if (this.rive.getUservar(this._social_id, "TYPE") === "LEAD") {
      return "lead";
    } else {
      return this.menu;
    }
  }
  get region() {
    switch (this.menu) {
      case "question":
      case "market":
      case "users":
        return this.rive.getUservar(this.chatId, "region");
        break;
      case "now":
      case "event":
      case "report":
      case "sos":
        return this.rive.getUservar(this.chatId, "region_now");
        break;
      default:
        return false;
        break;
    }
  }
  get place() {
    switch (this.menu) {
      case "question":
      case "market":
      case "users":
        return this.rive.getUservar(this.chatId, "place");
        break;
      case "now":
      case "event":
      case "report":
      case "sos":
        return this.rive.getUservar(this.chatId, "now_place");
        break;
    }
  }
  get hours() {
    switch (this.menu) {
      case "now":
      case "event":
      case "report":
      case "sos":
        return this.rive.getUservar(this.chatId, "hours");

      default:
        return false;
    }
  }
  get action_button() {
    switch (this.menu) {
      case "question":
        return "–æ—Ç–≤–µ—Ç–∏—Ç—å";
        break;
      case "now":
        return "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è";
        break;
      case "event":
        return "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å";
        break;
      case "report":
        return "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è";
        break;
      case "market":
        return "–∫—É–ø–∏—Ç—å";
        break;
      case "sos":
        return "–ø–æ–º–æ—á—å";
        break;
      case "chat":
        return "–æ—Ç–≤–µ—Ç–∏—Ç—å";
        break;
      case "users":
        return "–ø—Ä–∏–≤–µ—Ç";
        break;
    }
  }
  get bike_model() {
    return this.rive.getUservar(this.chatId, "bikemodel");
  }
  get bike_rain() {
    return this.rive.getUservar(this.chatId, "raintemp");
  }
  get bike_temp() {
    return this.rive.getUservar(this.chatId, "biketemp");
  }
  get bike_winter() {
    return this.rive.getUservar(this.chatId, "wintertemp");
  }
  get title_quotes() {
    return `'${this.crop_title}'`;
  }
  get title() {
    switch (this.menu) {
      case "event":
      case "report":
      case "sos":
      case "market":
      case "question":
      case "chat":
        return this.crop_title;
        break;

      default:
        return false;
        break;
    }
  }
  get crop_title() {
    return this.rive.getUservar(this.chatId, "msg_title").substr(0, 30);
  }
  get likes() {
    return [this.user];
  }
  get user() {
    return {
      author: true,
      first_name: this.firstName,
      id: this.social_id,
      last_name: this.lastName,
      photo_url: this.photo_url,
      sex: this.sex,
      type_social: this.social
    };
  }
  get temp_name() {
    switch (this.menu) {
      case "question":
        return "–≤–æ–ø—Ä–æ—Å";
        break;
      case "now":
        return "—Å–µ–π—á–∞—Å";
        break;
      case "event":
        return "–≤—Å—Ç—Ä–µ—á–∞";
        break;
      case "report":
        return "–æ—Ç—á–µ—Ç";
        break;
      case "market":
        return "–º–∞—Ä–∫–µ—Ç";
        break;
      case "sos":
        return "sos";
        break;
      case "chat":
        return "–±–µ—Å–µ–¥–∞";
        break;
      case "tour":
        return "–≤–µ–ª–æ—Ç—É—Ä";
        break;
      case "users":
        return this.hashtag_sex;
        break;
      default:
        return "–¥–æ–±–∞–≤–∏—Ç—å –≤ temp_name";
        break;
    }
  }

  get time() {
    switch (this.menu) {
      case "event":
      case "report":
        return this.rive.getUservar(this.chatId, "eventtime");
      default:
        return false;
    }
  }
  get startTime() {
    switch (this.menu) {
      case "event":
      case "report":
        return new Date(
          momenttz(this.rive.getUservar(this.chatId, "eventutcdate"))
            .tz("Asia/Yekaterinburg")
            .subtract(5, "h")
            .format()
        );
      default:
        return false;
    }
  }
  get date() {
    switch (this.menu) {
      case "event":
      case "report":
        return this.rive.getUservar(this.chatId, "eventdate");

      default:
        return false;
    }
  }
  get eventdate_album() {
    return `${this.rive.getUservar(this.chatId, "eventdate_album")}`;
  }
  get date_hashtag() {
    switch (this.menu) {
      case "event":
        return `${this.rive.getUservar(this.chatId, "eventdate_hash")}@${
          this.hash_id_bike
        }`;
      case "report":
        return `${this.rive.getUservar(this.chatId, "eventdate_hash")}@${
          this.hash_id_overhear
        }`;

      default:
        return false;
    }
  }
  get user_hashtag() {
    switch (this.menu) {
      case "event":
      case "report":
      case "sos":
      case "market":
      case "question":
        return this.rive.getUservar(this.chatId, "hashtag");
        break;
      case "chat":
        return "–í–µ–ª–æ–ø–æ–∫–∞—Ç—É—à–∫–∞";
        break;

      default:
        return false;
        break;
    }
  }
  get data_bot() {
    const userData = this.rive.getUservars(this.chatId);
    if (
      userData.__initialmatch__ &&
      userData.__lastmatch__ &&
      userData.__history__ &&
      userData.__last_triggers__
    ) {
      userData.__initialmatch__copy = userData.__initialmatch__;
      userData.__lastmatch__copy = userData.__lastmatch__;
      userData.__history__copy = userData.__history__;
      userData.__last_triggers__copy = userData.__last_triggers__;
    }
    delete userData.__initialmatch__;
    delete userData.__history__;
    delete userData.__lastmatch__;
    delete userData.__last_triggers__;
    return userData;
  }
  get from_group_id() {
    return this.group_id;
  }
  get vk_owner_id() {
    switch (this.menu) {
      case "quest_name1":
        return 73768894;
      case "quest_name2":
        return 73768894;
      case "users":
      case "now":
      case "event":
      case "sos":
        return VK_ID_PUBLIC_OVER;
      case "report":
        return VK_ID_PUBLIC_BIKE;
      case "market":
      case "question":
      case "chat":
        return VK_ID_PUBLIC_BIKE;
    }
  }
  get vk_topic_id() {
    switch (this.menu) {
      case "question":
        return 35857679;
        break;
      case "market":
        return 35857679;
        break;
      case "quest_name1":
        return 35779466;
        break;
      case "quest_name2":
        return 35779466;
        break;
    }
  }

  get newDate() {
    return new Date(EkbDateTime);
  }
  get timeStamp() {
    return new Date().getTime();
  }
};
